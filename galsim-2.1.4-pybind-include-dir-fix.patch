# By default, galsim would search pybind11 header files using its get_include() function.
# the current implementation would not work for the EasyBuild location of pybind11 .h files.
# We can expect the right path in $EBROOTPYBIND11 env variable, so let's use it.
#
# - 2.4.2019, J. Dvoracek (Institute of Physics | Czech Academy of Sciences, www.fzu.cz
#
--- GalSim-2.1.4/setup.py.orig       2019-04-02 17:45:38.770603948 +0200
+++ GalSim-2.1.4/setup.py    	2019-04-02 18:00:44.652634374 +0200
@@ -532,26 +532,20 @@
     builder.include_dirs.append(eigen_dir)
 
     # Finally, add pybind11's include dir
+    # * _special_ pybind11 .h directory detection for for EasyBuild:
+
     import pybind11
     print('PyBind11 is version ',pybind11.__version__)
-    print('Looking for pybind11 header files: ')
-    for user in [True, False, None]:
-        if user is None:
-            # Last time through, raise an error.
-            print("Could not find pybind11 header files.")
-            print("They should have been in one of the following two locations:")
-            print("   ",pybind11.get_include(True))
-            print("   ",pybind11.get_include(False))
-            raise OSError("Could not find PyBind11")
+    print('taking pybind11 include dir directly from Easybuild env variable..')
+    try_dir = str(os.environ['EBROOTPYBIND11']) + "/include/python" + str(sys.version_info[0]) + "." + str(sys.version_info[1]) + "/"
 
-        try_dir = pybind11.get_include(user=user)
-        print('  ',try_dir,end='')
-        if os.path.isfile(os.path.join(try_dir, 'pybind11/pybind11.h')):
-            print('  (yes)')
-            builder.include_dirs.append(try_dir)
-            break
-        else:
-            print('  (no)')
+    print('  ',try_dir,end='')
+    if os.path.isfile(os.path.join(try_dir, 'pybind11/pybind11.h')):
+        print('  (yes)')
+        builder.include_dirs.append(try_dir)
+        return
+    else:
+        print('  (no)')
 
 def parse_njobs(njobs, task=None, command=None, maxn=4):
     """Helper function to parse njobs, which may be None (use ncpu) or an int.
